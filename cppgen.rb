#encoding: UTF-8
require 'erb'
require 'rexml/document'
include REXML

$RESOURCE_ROOT = "/Users/oscar/workspace/oc/Map/Map/"
#
#变量命名规范: button1或者indexButton; 然后在代码里为变量m_pButton1或者m_pIndexButton
#

headerTemplate = %q{
//generated by tool, do not modify it.
#ifndef __<%= view.className.upcase %>__H_
#define __<%= view.className.upcase %>__H_

#include "cocos2d.h"
#include "cocos-ext.h"
USING_NS_CC;
USING_NS_CC_EXT;

class <%= view.className %> : public CCControl
{

protected:
  <% view.declarStmts.each do |e| %> 
  <%= e %>
  <% end %>

public:
   <%= view.className %>();
   virtual bool init(void);
   virtual ~<%= view.className %>();
   CREATE_FUNC(<%= view.className %>);
};
#endif

}

cppTemplate = %q{
//generated by tool, do not modify it
#include "<%= view.headerFile%>"

<%= view.className %>::<%= view.className %>()
<%= view.genInitList%>
{

}

<%= view.className %>::~<%= view.className %>()
{
   <% view.children.each do |e| %>
   CC_SAFE_RELEASE(<%= e.cppVariable%>);
   <% end %>
}

bool <%= view.className %>::init()
{
   setContentSize(CCSizeMake(<%= view.width%>, <%= view.height%>));
  <% view.initStmts.each do |e| %> 
  <%= e %>
  <% end %>


   return true;
}



}

class View
   attr_accessor :name, :width, :height, :children, :declarStmts, :initStmts, :headerFile, :cppFile
   def initialize(configFile)
      doc = Document.new(File.new(configFile))
      root = doc.root
      index = configFile.rindex('.')
      if index == -1 
         @name = configFile
      else
         @name = configFile[0..index-1]
      end
      @headerFile = @name.capitalize+".h"
      @cppFile = @name.capitalize+".cpp"
      @width = root.attributes["sceneWidth"]
      @height = root.attributes["sceneHeight"]
      @declarStmts = []
      @initStmts = []
      @children = []
      root.elements.each { |e|
         control = eval(e.name).new(e)
         @children << control
         @declarStmts << control.toDeclarationStmt
         @initStmts << control.toInitStmt
      }
   end

   #声明语句 
   def genDeclar()

      return "hello world"
   end

   #初始化语句
   def genInit()
   end

   #构造函数的初始化列表
   def genInitList()
      result = ""
      flag = ":"
      firstOne = true
      @children.each { |e|
         if firstOne == true
            flag = ":"
            firstOne = false
         else
            flag = "\n,"
         end
         result << flag+"#{e.cppVariable}(NULL)"
      }
      result <<"\n"
      return result
   end

   def className()
      return @name.capitalize
   end
end




class Control
      attr_accessor :variable, :cppVariable, :x, :y, :layer
      @@id = 0
      def initialize(element)
         @variable = element.attributes["var"]
         if @variable == nil
            @@id = @@id + 1
            @variable = "control"+@@id.to_s
         end
         @cppVariable = "m_p"+@variable.capitalize
         @x = element.attributes["x"]
         @y = element.attributes["y"]
         @layer = element.attributes["layer"]
      end
      def toDeclarationStmt()
         return "CC_SYNTHESIZE(#{type}, #{@cppVariable}, #{@variable.capitalize});"
      end
      
      def toInitStmt()

      end

      def type()
         return "NIL"
      end
end


class UIView < Control
   attr_accessor :source
   def initialize(element)
      super(elemnt)
      @source = element.attributes["source"]
   end
end

def toCocos2dUrl(url)
   abc = url.split('.')
   return abc[-1]+"."+abc[0]
end

class Image < Control
   attr_accessor :url
   def initialize(element)
      super(element)
      @url = toCocos2dUrl(element.attributes["url"])
   end
   def type()
      return "CCSprite*"
   end
   def toInitStmt()
      result = ""
      result << "\tset#{@variable.capitalize}(CCSprite::create(\"#{@url}\"));\n"
      result << "\t#{@cppVariable}->setAnchorPoint(CCPointZero);\n"
      result << "\t#{@cppVariable}->setPosition(ccp(#{@x},#{@y}));\n"
      result << "\taddChild(#{@cppVariable}, #{@layer});\n"
      
      return result
   end
end

class Button < Control
   attr_accessor :label, :labelBold, :labelSize, :labelMargin, :labelColors, :background
   def initialize(element)
      super(element)
      @label = element.attributes["label"]
      @labelBold = element.attributes["labelBold"]
      @labelSize = element.attributes["labelSize"]
      @labelMargin = element.attributes["labelMargin"]
      @labelColors = element.attributes["labelColors"]
      @background = element.attributes["skin"]
   end
   def type()
      return "CCControlButton*"
   end
   def toInitStmt()
      font = "Courier-Bold"
      result = ""
      result << "\tset#{@variable.capitalize}(CCControlButton::create(CCLabelTTF::create(\"#{@label}\",\"#{font}\", #{@labelSize}), CCScale9Sprite::create(\"#{toCocos2dUrl(@background)}\")));\n"
      result << "\t#{@cppVariable}->setAnchorPoint(CCPointZero);\n"
      result << "\t#{@cppVariable}->setPosition(ccp(#{@x},#{@y}));\n"
      result << "\t#{@cppVariable}->setAdjustBackgroundImage(false);\n"
      result << "\t#{@cppVariable}->setZoomOnTouchDown(false);\n"
      #FIXME 处理menu_item_1_selected.png
      abc = toCocos2dUrl(@background).split('.')
      selected = abc[0]+"_selected."+abc[1]
      puts selected
      if File.exist? $RESOURCE_ROOT + selected
         result << "\t#{cppVariable}->setBackgroundSpriteForState(CCScale9Sprite::create(\"#{selected}\"), CCControlStateHighlighted);\n"
      end
      result << "\taddChild(#{@cppVariable}, #{@layer});\n"
      
      return result
   end
end


view = View.new('footer.xml')
puts "gen #{view.headerFile}"
hFile = ERB.new(headerTemplate, 0, "%<>")
outputHeaderFile = File.new(view.headerFile, "w+")
outputHeaderFile.write(hFile.result)

puts "gen #{view.cppFile}"
cppFile = ERB.new(cppTemplate, 0, "%<>")
outputCppFile = File.new(view.cppFile, "w+")
outputCppFile.write(cppFile.result)
puts "finished"
